# imagePullSecrets:
#  - name: my-repository-secret
image:
  repository: tchiotludo/akhq
  tag: "dev" # uses Chart.AppVersion by default

# custom annotations (example: for prometheus)
annotations: {}
  #prometheus.io/scrape: 'true'
  #prometheus.io/port: '8080'
  #prometheus.io/path: '/prometheus'

podAnnotations: {}

# custom labels
labels: {}
  # custom.label: 'true'

podLabels: {}

## You can put directly your configuration here... or add java opts or any other env vars
extraEnv: 
# - name: AKHQ_CONFIGURATION
#   value: |
#       akhq:
#         secrets:
#           docker-kafka-server:
#             properties:
#               bootstrap.servers: "kafka:9092"
- name: JAVA_OPTS
  value: "-Djavax.net.ssl.trustStore=/mnt/kafka-sslcerts/truststore.p12 -Djavax.net.ssl.trustStorePassword=mystorepassword"
# - name: CLASSPATH
#   value: "/any/additional/jars/desired.jar:/go/here.jar"

## Or you can also use configmap for the configuration...
configuration:
  micronaut:
    security:
      enabled: true
      ldap:
        default:
          enabled: true
          context:
            server: 'ldap://idm.dev.bip.va.gov:389'
            managerDn: 'uid=readonly,cn=users,cn=accounts,dc=dev,dc=bip,dc=va,dc=gov'
            managerPassword: 'xxxxxxxxxxxx'
          search:
            base: "cn=users,cn=accounts,dc=dev,dc=bip,dc=va,dc=gov"
            attribute: 
              - "uid"
          groups:
            enabled: true
            base: "cn=groups,cn=accounts,dc=dev,dc=bip,dc=va,dc=gov"
            filter: "member={0}"
  akhq:
    security:
      default-group: no-roles
      groups:
        full-sample:
          name: full-sample # Group name
          roles:  # roles for the group
            - topic/read
            - topic/insert
            - topic/delete
            - topic/config/update
            - node/read
            - node/config/update
            - topic/data/read
            - topic/data/insert
            - topic/data/delete
            - group/read
            - group/delete
            - group/offsets/update
            - acls/read
            - registry/read
            - registry/insert
            - registry/update
            - registry/delete
            - registry/version/delete
            - connect/read
            - connect/insert
            - connect/update
            - connect/delete
            - connect/state/update
          attributes:
            topics-filter-regexp: [".*"]
            connects-filter-regexp: [".*"]
            consumer-groups-filter-regexp: [".*"]
        topic-reader:
          name: topic-reader # Group name
          roles:  # roles for the group
            - topic/read
          attributes:
            topics-filter-regexp: [".*"]
            connects-filter-regexp: [".*"]
            consumer-groups-filter-regexp: [".*"]
        topic-writer:
          name: topic-writer # Group name
          roles:
            - topic/read
            - topic/insert
            - topic/delete
            - topic/config/update
          attributes:
            topics-filter-regexp: [".*"]
            connects-filter-regexp: [".*"]
            consumer-groups-filter-regexp: [".*"]
          # attributes:
          #   topics-filter-regexp:
          #     - "test.*"
          #   connects-filter-regexp:
          #     - "^test.*$"
          #   consumer-groups-filter-regexp:
          #     - "consumer.*"
      ldap:
        groups:
          - name: bip-cluster-admins
            groups:
              - full-sample
          - name: ipausers
            groups:
              - topic-reader
          - name: akhq-testing
            groups:
              - full-sample
        # users:
        #   - username: dstrivelli
        #     groups:
        #       - topic-reader
        #       - topic-writer
    html-head: |
      <style type="text/css">
        .logo-wrapper:after {
          display: block;
          content: "ALT8";
          position: relative;
          text-transform: uppercase;
          text-align: center;
          color: red;
          margin-top: 10px;
        }
        .logo-wrapper span.logo {
          background: url(https://nexus.dev8.bip.va.gov/repository/raw-dependencies/miscellaneous/bip-akhq-logo.png) no-repeat !important;
          background-size: cover !important;
          height: 75px !important;
        }
        .logo-wrapper {
          background-color: #194a1a !important;
        }
      </style>
      <script>
      function waitForElm(selector) {
          return new Promise(resolve => {
              if (document.querySelector(selector)) {
                  return resolve(document.querySelector(selector));
              }

              const observer = new MutationObserver(mutations => {
                  if (document.querySelector(selector)) {
                      resolve(document.querySelector(selector));
                      observer.disconnect();
                  }
              });

              observer.observe(document, {
                  childList: true,
                  subtree: true
              });
          });
      }
      waitForElm('h3 > img').then((elm) => {
          elm.src = "https://nexus.dev8.bip.va.gov/repository/raw-dependencies/miscellaneous/bip-akhq-logo.png"          
      });
      </script>
    server:
      access-log:
        enabled: false
        name: org.akhq.log.access

##... and secret for connection information
existingSecrets: ""
# name of the existingSecret
secrets: 
  akhq:
    connections:
      kafka-alt8:
        properties:
          bootstrap.servers: "kafka.confluentv2.svc.alt8:9071"
          security.protocol: SASL_SSL
          sasl.mechanism: PLAIN
          sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password="xxxxxxxxxxxx";
          ssl.keystore.location: /mnt/kafka-sslcerts/keystore.p12
          ssl.keystore.password: xxxxxxxxxxxx
          ssl.truststore.location: /mnt/kafka-sslcerts/truststore.p12
          ssl.truststore.password: xxxxxxxxxxxx
        schema-registry:
          url: "https://schemaregistry.confluentv2.svc.alt8:8081"
          basic-auth-username: "sr"
          basic-auth-password: "xxxxxxxxxxxx"
          properties:
            schema.registry.ssl.truststore.location: /mnt/sr-sslcerts/truststore.p12
            schema.registry.ssl.truststore.password: xxxxxxxxxxxx
        connect:
          - name: "connect"
            url: "https://connect.confluentv2.svc.alt8:8083"
            basic-auth-username: connect
            basic-auth-password: xxxxxxxxxxxx
            ssl.keystore.location: /mnt/connect-sslcerts/keystore.p12
            ssl.keystore.password: xxxxxxxxxxxx
            ssl.truststore.location: /mnt/connect-sslcerts/truststore.p12
            ssl.truststore.password: xxxxxxxxxxxx

kafkaSecrets: []
#Provide extra base64 encoded kubernetes secrets (keystore/truststore)

# Any extra volumes to define for the pod (like keystore/truststore)
extraVolumes:
  - name: kafka-sslcerts
    secret:
      defaultMode: 420
      secretName: kafka-pkcs12
  - name: sr-sslcerts
    secret:
      defaultMode: 420
      secretName: schemaregistry-pkcs12
  - name: connect-sslcerts
    secret:
      defaultMode: 420
      secretName: connect-pkcs12

# Any extra volume mounts to define for the akhq container
extraVolumeMounts:
  - mountPath: /mnt/kafka-sslcerts
    name: kafka-sslcerts
  - mountPath: /mnt/sr-sslcerts
    name: sr-sslcerts
  - mountPath: /mnt/connect-sslcerts
    name: connect-sslcerts

# Specify ServiceAccount for pod
serviceAccountName: null
serviceAccount:
  create: false
  #annotations:
  #  eks.amazonaws.com/role-arn: arn:aws:iam::123456789000:role/iam-role-name-here

# Add your own init container or uncomment and modify the example.
initContainers: {}
#   create-keystore:
#     image: "openjdk:11-slim"
#     command: ['sh', '-c', 'keytool']
#     volumeMounts:
#      - mountPath: /tmp
#        name: certs

# Configure the Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1000

# Configure the Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext: {}
  # allowPrivilegeEscalation: false
  # privileged: false
  # capabilities:
  #   drop:
  #     - ALL
  # runAsNonRoot: true
  # runAsUser: 1001
  # readOnlyRootFilesystem: true

service:
  enabled: true
  type: ClusterIP
  port: 80
  #httpNodePort: 32551
  labels: {}
  annotations:
    # cloud.google.com/load-balancer-type: "Internal"

ingress:
  enabled: true
  ingressClassName: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  paths:
    - /
  hosts:
    - akhq.alt8.bip.va.gov
  tls:
  - secretName: wildcard-tls
    hosts:
    - akhq.alt8.bip.va.gov

readinessProbe:
  prefix: "" # set same as `micronaut.server.context-path`

resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
