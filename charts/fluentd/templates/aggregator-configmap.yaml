{{- if and .Values.aggregator.enabled (not .Values.aggregator.configMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fluentd.fullname" . }}-aggregator-cm
  labels: {{- include "fluentd.labels" . | nindent 4 }}
    app.kubernetes.io/component: aggregator
data:
  fluentd.conf: |
    {{- if .Values.metrics.enabled -}}
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @type prometheus
      port {{ .Values.metrics.service.port }}
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>
    {{- end }}

    # Ignore fluentd own events
    <match fluent.**>
      @type null
    </match>

    # TCP input to receive logs from
    {{- if and .Values.aggregator.port }}
    <source>
      @type forward
      bind 0.0.0.0
      port {{ .Values.aggregator.port }}
    </source>
    {{- end }}

    # HTTP input for the liveness and readiness probes
    <source>
      @type http
      bind 0.0.0.0
      port 9880
    </source>

    # Throw the healthcheck to null instead of forwarding it
    <match fluentd.healthcheck>
      @type null
    </match>

    # Break out app and env from namespace

    ## Until PA gets their acts together and can produce valid json...
    #<filter pension-automation-prod.kubernetes.**>
    #  @type record_modifier
    #  <replace>
    #    key message
    #    expression /\\/
    #    replace ''
    #  </replace>
    #</filter>

    ## Extract claimid
    # Fix inconsistent case of claimid/claimId
    <filter pension-automation-prod.kubernetes.**>
      @type record_modifier
      #<record>
      #  claimid ${record['claimId'].nil? ? 0 : record['claimId'].to_i}
      #</record>
      remove_key claimId
    </filter>

    # Expand out message data
    <filter {pension-automation-prod,pension-automation-prodtest}.kubernetes.**>
      @type parser
      key_name message
      reserve_time
      reserve_data
      <parse>
        @type multi_format
    #    <pattern>
    #      format regexp
    #      expression /^Award process completed for claim ID (?<claimid>[0-9]+)$/
    #    </pattern>
        # Not sure this one actually works
    #    <pattern>
    #      format regexp
    #      expression /^Rating process completed for claim ID (?<claimid>[0-9]+)$/
    #    </pattern>
        <pattern>
          format regexp
          expression /^Pension Automation Off-ramp: (?<offramp_status>[A-Z_]+) - (?<offramp_reason>.*)$/
        </pattern>
    #    <pattern>
    #      format regexp
    #      expression /^Classifier Decision for claim ID (?<claimid>[0-9]+): (?<classifier_decision>[A-Z_]+), (?<classifier_match>[A-Z_]+)$/
    #    </pattern>
        <pattern>
          format none
        </pattern>
      </parse>
    </filter>

    # Send the logs to elasticsearch
    <match **.kubernetes.**>
      @type elasticsearch_dynamic
      include_tag_key true
      scheme "#{ENV.fetch('ELASTICSEARCH_SCHEME', 'http')}"
      host "#{ENV['ELASTICSEARCH_HOST']}"
      port "#{ENV['ELASTICSEARCH_PORT']}"
      logstash_format true
      logstash_prefix ${record['kubernetes']['namespace_name']}

      <buffer>
        @type file
        path /opt/bitnami/fluentd/logs/buffers/logs.buffer
        # Flush conf
        flush_mode interval
        flush_thread_count 2
        flush_interval 5s
        # Retry conf
        retry_type exponential_backoff
        retry_forever
        retry_max_interval 30
        # Chunk conf
        total_limit_size 1024MB
        chunk_limit_size 16MB
        overflow_action block
      </buffer>
    </match>

    # Drop everything else
    <match **>
      @type null
    </match>
{{- end -}}
